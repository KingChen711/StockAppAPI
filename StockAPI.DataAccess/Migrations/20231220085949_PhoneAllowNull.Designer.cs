// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockAPI.DataAccess.Data;

#nullable disable

namespace StockAPI.DataAccess.Migrations
{
    [DbContext(typeof(StockAppContext))]
    [Migration("20231220085949_PhoneAllowNull")]
    partial class PhoneAllowNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockAPI.Models.CoveredWarrant", b =>
                {
                    b.Property<int>("WarrantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("warrant_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantId"));

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<DateOnly?>("IssueDate")
                        .HasColumnType("date")
                        .HasColumnName("issue_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal?>("StrikePrice")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("strike_price");

                    b.Property<int?>("UnderlyingAssetId")
                        .HasColumnType("int")
                        .HasColumnName("underlying_asset_id");

                    b.Property<string>("WarrantType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("warrant_type");

                    b.HasKey("WarrantId")
                        .HasName("PK__covered___2BD1EED26456E8BF");

                    b.HasIndex("UnderlyingAssetId");

                    b.ToTable("covered_warrants", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.Derivative", b =>
                {
                    b.Property<int>("DerivativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("derivative_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DerivativeId"));

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("change");

                    b.Property<int?>("ContractSize")
                        .HasColumnType("int")
                        .HasColumnName("contract_size");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<decimal>("HighPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("high_price");

                    b.Property<decimal>("LastPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("last_price");

                    b.Property<decimal>("LowPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("low_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("OpenInterest")
                        .HasColumnType("int")
                        .HasColumnName("open_interest");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("open_price");

                    b.Property<decimal>("PercentChange")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("percent_change");

                    b.Property<decimal?>("StrikePrice")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("strike_price");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("time_stamp");

                    b.Property<int?>("UnderlyingAssetId")
                        .HasColumnType("int")
                        .HasColumnName("underlying_asset_id");

                    b.Property<int>("Volume")
                        .HasColumnType("int")
                        .HasColumnName("volume");

                    b.HasKey("DerivativeId")
                        .HasName("PK__derivati__EF7FE46F6D870ABD");

                    b.HasIndex("UnderlyingAssetId");

                    b.ToTable("derivatives", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.EducationalResource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("resource_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("datetime")
                        .HasColumnName("date_published");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("ResourceId")
                        .HasName("PK__educatio__4985FC73CC55BEDB");

                    b.ToTable("educational_resources", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.Etf", b =>
                {
                    b.Property<int>("EtfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("etf_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EtfId"));

                    b.Property<DateOnly?>("InceptionDate")
                        .HasColumnType("date")
                        .HasColumnName("inception_date");

                    b.Property<string>("ManagementCompany")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("management_company");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("symbol");

                    b.HasKey("EtfId")
                        .HasName("PK__etfs__91787216A5A955AE");

                    b.HasIndex(new[] { "Symbol" }, "UQ__etfs__DF7EEB810D0E8CCD")
                        .IsUnique();

                    b.ToTable("etfs", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.EtfHolding", b =>
                {
                    b.Property<int?>("EtfId")
                        .HasColumnType("int")
                        .HasColumnName("etf_id");

                    b.Property<decimal?>("SharesHeld")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("shares_held");

                    b.Property<int?>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("weight");

                    b.HasIndex("EtfId");

                    b.HasIndex("StockId");

                    b.ToTable("etf_holdings", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.EtfQuote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quote_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteId"));

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("change");

                    b.Property<int?>("EtfId")
                        .HasColumnType("int")
                        .HasColumnName("etf_id");

                    b.Property<decimal>("PercentChange")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("percent_change");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("time_stamp");

                    b.Property<int>("TotalVolume")
                        .HasColumnType("int")
                        .HasColumnName("total_volume");

                    b.HasKey("QuoteId")
                        .HasName("PK__etf_quot__0D37DF0CEBFE29CC");

                    b.HasIndex("EtfId");

                    b.ToTable("etf_quotes", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.IndexConstituent", b =>
                {
                    b.Property<int?>("IndexId")
                        .HasColumnType("int")
                        .HasColumnName("index_id");

                    b.Property<int?>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    b.HasIndex("IndexId");

                    b.HasIndex("StockId");

                    b.ToTable("index_constituents", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.LinkedBankAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_type");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("bank_name");

                    b.Property<string>("RoutingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("routing_number");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AccountId")
                        .HasName("PK__linked_b__46A222CD40BA528E");

                    b.HasIndex("UserId");

                    b.ToTable("linked_bank_accounts", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.MarketIndex", b =>
                {
                    b.Property<int>("IndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("index_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndexId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("symbol");

                    b.HasKey("IndexId")
                        .HasName("PK__market_i__9D4F318753F99E4F");

                    b.HasIndex(new[] { "Symbol" }, "UQ__market_i__DF7EEB8132E15D31")
                        .IsUnique();

                    b.ToTable("market_indices", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notification_type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__notifica__E059842F7DFE87E1");

                    b.HasIndex("UserId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Direction")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("direction");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("order_type");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<int?>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("PK__orders__4659622963A55D9C");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasTrigger("trigger_orders");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("StockAPI.Models.Portfolio", b =>
                {
                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("purchase_date");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("purchase_price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("portfolios", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quote_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteId"));

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("change");

                    b.Property<decimal>("PercentChange")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("percent_change");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("time_stamp");

                    b.Property<int>("Volume")
                        .HasColumnType("int")
                        .HasColumnName("volume");

                    b.HasKey("QuoteId")
                        .HasName("PK__quotes__0D37DF0C6AAEF459");

                    b.HasIndex("StockId");

                    b.ToTable("quotes", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("company_name");

                    b.Property<string>("Industry")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("industry");

                    b.Property<string>("IndustryEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("industry_en");

                    b.Property<decimal?>("MarketCap")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("market_cap");

                    b.Property<int?>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("rank");

                    b.Property<string>("RankSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("rank_source");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("Sector")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("sector");

                    b.Property<string>("SectorEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("sector_en");

                    b.Property<string>("StockType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stock_type");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("symbol");

                    b.HasKey("StockId")
                        .HasName("PK__stocks__E8666862BD758105");

                    b.HasIndex(new[] { "Symbol" }, "UQ__stocks__DF7EEB816AF5B9F2")
                        .IsUnique();

                    b.ToTable("stocks", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<int?>("LinkedAccountId")
                        .HasColumnType("int")
                        .HasColumnName("linked_account_id");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionId")
                        .HasName("PK__transact__85C600AF8BFF503E");

                    b.HasIndex("LinkedAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("country");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("hashed_password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__users__B9BE370FAC90BD1D");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E61649A910B24")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__users__F3DBC57282BE2C7F")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.UserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("device_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__user_dev__3213E83F4E8AB796");

                    b.HasIndex("UserId");

                    b.ToTable("user_devices", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.VStockIndex", b =>
                {
                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("company_name");

                    b.Property<int?>("IndexId")
                        .HasColumnType("int")
                        .HasColumnName("index_id");

                    b.Property<string>("IndexName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("index_name");

                    b.Property<string>("IndexSymbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("index_symbol");

                    b.Property<string>("Industry")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("industry");

                    b.Property<string>("IndustryEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("industry_en");

                    b.Property<decimal?>("MarketCap")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("market_cap");

                    b.Property<string>("Sector")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("sector");

                    b.Property<string>("SectorEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("sector_en");

                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    b.Property<string>("StockType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stock_type");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("symbol");

                    b.ToTable((string)null);

                    b.ToView("v_stock_index", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.VStocksDerivative", b =>
                {
                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("change");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("company_name");

                    b.Property<int?>("ContractSize")
                        .HasColumnType("int")
                        .HasColumnName("contract_size");

                    b.Property<int>("DerivativeId")
                        .HasColumnType("int")
                        .HasColumnName("derivative_id");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<decimal>("HighPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("high_price");

                    b.Property<string>("Industry")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("industry");

                    b.Property<string>("IndustryEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("industry_en");

                    b.Property<decimal>("LastPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("last_price");

                    b.Property<decimal>("LowPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("low_price");

                    b.Property<decimal?>("MarketCap")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("market_cap");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("OpenInterest")
                        .HasColumnType("int")
                        .HasColumnName("open_interest");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("open_price");

                    b.Property<decimal>("PercentChange")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("percent_change");

                    b.Property<int?>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<string>("RankSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("rank_source");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("Sector")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("sector");

                    b.Property<string>("SectorEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("sector_en");

                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    b.Property<string>("StockType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stock_type");

                    b.Property<decimal?>("StrikePrice")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("strike_price");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("symbol");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("time_stamp");

                    b.Property<int?>("UnderlyingAssetId")
                        .HasColumnType("int")
                        .HasColumnName("underlying_asset_id");

                    b.Property<int>("Volume")
                        .HasColumnType("int")
                        .HasColumnName("volume");

                    b.ToTable((string)null);

                    b.ToView("v_stocks_derivatives", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.ViewQuotesRealtime", b =>
                {
                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("change");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("company_name");

                    b.Property<string>("IndexName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("index_name");

                    b.Property<string>("IndexSymbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("index_symbol");

                    b.Property<string>("Industry")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("industry");

                    b.Property<string>("IndustryEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("industry_en");

                    b.Property<decimal?>("MarketCap")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("market_cap");

                    b.Property<decimal>("PercentChange")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("percent_change");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int")
                        .HasColumnName("quote_id");

                    b.Property<string>("Sector")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("sector");

                    b.Property<string>("SectorEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("sector_en");

                    b.Property<string>("StockType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stock_type");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("symbol");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("time_stamp");

                    b.Property<int>("Volume")
                        .HasColumnType("int")
                        .HasColumnName("volume");

                    b.ToTable((string)null);

                    b.ToView("view_quotes_realtime", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.Watchlist", b =>
                {
                    b.Property<int?>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasIndex("StockId");

                    b.HasIndex(new[] { "UserId", "StockId" }, "unique_WatchlistEntry")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL AND [stock_id] IS NOT NULL");

                    b.ToTable("watchlists", (string)null);
                });

            modelBuilder.Entity("StockAPI.Models.CoveredWarrant", b =>
                {
                    b.HasOne("StockAPI.Models.Stock", "UnderlyingAsset")
                        .WithMany("CoveredWarrants")
                        .HasForeignKey("UnderlyingAssetId")
                        .HasConstraintName("FK__covered_w__under__4D94879B");

                    b.Navigation("UnderlyingAsset");
                });

            modelBuilder.Entity("StockAPI.Models.Derivative", b =>
                {
                    b.HasOne("StockAPI.Models.Stock", "UnderlyingAsset")
                        .WithMany("Derivatives")
                        .HasForeignKey("UnderlyingAssetId")
                        .HasConstraintName("FK__derivativ__under__4AB81AF0");

                    b.Navigation("UnderlyingAsset");
                });

            modelBuilder.Entity("StockAPI.Models.EtfHolding", b =>
                {
                    b.HasOne("StockAPI.Models.Etf", "Etf")
                        .WithMany()
                        .HasForeignKey("EtfId")
                        .HasConstraintName("FK__etf_holdi__etf_i__5629CD9C");

                    b.HasOne("StockAPI.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .HasConstraintName("FK__etf_holdi__stock__571DF1D5");

                    b.Navigation("Etf");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("StockAPI.Models.EtfQuote", b =>
                {
                    b.HasOne("StockAPI.Models.Etf", "Etf")
                        .WithMany("EtfQuotes")
                        .HasForeignKey("EtfId")
                        .HasConstraintName("FK__etf_quote__etf_i__5441852A");

                    b.Navigation("Etf");
                });

            modelBuilder.Entity("StockAPI.Models.IndexConstituent", b =>
                {
                    b.HasOne("StockAPI.Models.MarketIndex", "Index")
                        .WithMany()
                        .HasForeignKey("IndexId")
                        .HasConstraintName("FK__index_con__index__46E78A0C");

                    b.HasOne("StockAPI.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .HasConstraintName("FK__index_con__stock__47DBAE45");

                    b.Navigation("Index");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("StockAPI.Models.LinkedBankAccount", b =>
                {
                    b.HasOne("StockAPI.Models.User", "User")
                        .WithMany("LinkedBankAccounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__linked_ba__user___6A30C649");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockAPI.Models.Notification", b =>
                {
                    b.HasOne("StockAPI.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__notificat__user___6477ECF3");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockAPI.Models.Order", b =>
                {
                    b.HasOne("StockAPI.Models.Stock", "Stock")
                        .WithMany("Orders")
                        .HasForeignKey("StockId")
                        .HasConstraintName("FK__orders__stock_id__5EBF139D");

                    b.HasOne("StockAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__orders__user_id__5DCAEF64");

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockAPI.Models.Portfolio", b =>
                {
                    b.HasOne("StockAPI.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .HasConstraintName("FK_Portfolios_Stocks");

                    b.HasOne("StockAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__portfolio__user___60A75C0F");

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockAPI.Models.Quote", b =>
                {
                    b.HasOne("StockAPI.Models.Stock", "Stock")
                        .WithMany("Quotes")
                        .HasForeignKey("StockId")
                        .HasConstraintName("FK__quotes__stock_id__4222D4EF");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("StockAPI.Models.Transaction", b =>
                {
                    b.HasOne("StockAPI.Models.LinkedBankAccount", "LinkedAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("LinkedAccountId")
                        .HasConstraintName("FK__transacti__linke__6E01572D");

                    b.HasOne("StockAPI.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__transacti__user___6D0D32F4");

                    b.Navigation("LinkedAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockAPI.Models.UserDevice", b =>
                {
                    b.HasOne("StockAPI.Models.User", "User")
                        .WithMany("UserDevices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__user_devi__user___3B75D760");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockAPI.Models.Watchlist", b =>
                {
                    b.HasOne("StockAPI.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .HasConstraintName("FK__watchlist__stock__59FA5E80");

                    b.HasOne("StockAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__watchlist__user___59063A47");

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockAPI.Models.Etf", b =>
                {
                    b.Navigation("EtfQuotes");
                });

            modelBuilder.Entity("StockAPI.Models.LinkedBankAccount", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("StockAPI.Models.Stock", b =>
                {
                    b.Navigation("CoveredWarrants");

                    b.Navigation("Derivatives");

                    b.Navigation("Orders");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("StockAPI.Models.User", b =>
                {
                    b.Navigation("LinkedBankAccounts");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");

                    b.Navigation("UserDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
